from uuid import UUID

from sqlalchemy.ext.asyncio import AsyncSession
from sqlmodel import select

from db.models import User, Telegram_User


class UserRepository:
    session: AsyncSession

    def __init__(self, session: AsyncSession):
        self.session = session

    async def new_user(self, user: User, telegram_user_id: int | None = None):
        self.session.add(user)
        await self.session.commit()  # it is necessary, because the user ID is generated by the database
        if telegram_user_id is not None:
            telegram_user: Telegram_User = Telegram_User(telegram_user_id=telegram_user_id, id_user=user.id)
            self.session.add(telegram_user)
            await self.session.commit()

    async def add_telegram_user(self, user: User, *telegram_user_id: int):
        for tg_id in telegram_user_id:
            telegram_user: Telegram_User = Telegram_User(telegram_user_id=tg_id, id_user=user.id)
            self.session.add(telegram_user)
        await self.session.commit()

    async def get_user(self, user_id: UUID) -> User:
        return await self.session.execute(select(User).where(User.id == user_id))

    async def get_all_tasks(self) -> list[User]:
        return await self.session.execute(select(User))

    async def get_user_by_telegram_user_id(self, telegram_user_id: int) -> User:
        telegram_user: Telegram_User = await self.session.execute(select(Telegram_User)
                                                                  .where(Telegram_User.telegram_user_id == telegram_user_id)
                                                                  .limit(1))
        return await self.session.execute(select(User).where(User.id == telegram_user.telegram_user_id))

    async def update_user(self, user_id: UUID, **kwargs: [str, any]):
        user: User = self.get_user(user_id)
        user.current_language = kwargs["current_language"]
        user.login = kwargs["login"]
        user.phone = kwargs["phone"]
        user.upd_datetime = kwargs["upd_datetime"]
        await self.session.commit()
